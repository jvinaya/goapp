// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: payment.sql

package db

import (
	"context"
	"time"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
  loan_id,
  user_id,
  amount,
  created_by,
  last_updated_by,
  ip_from,
  user_agent
) VALUES (
  $1, $2,$3,$4,$5,$6,$7
)
RETURNING id, loan_id, user_id, amount, created_by, created_at, last_updated_by, updated_at, ip_from, user_agent
`

type CreatePaymentParams struct {
	LoanID        int64  `json:"loan_id"`
	UserID        int64  `json:"user_id"`
	Amount        string `json:"amount"`
	CreatedBy     string `json:"created_by"`
	LastUpdatedBy string `json:"last_updated_by"`
	IpFrom        string `json:"ip_from"`
	UserAgent     string `json:"user_agent"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.LoanID,
		arg.UserID,
		arg.Amount,
		arg.CreatedBy,
		arg.LastUpdatedBy,
		arg.IpFrom,
		arg.UserAgent,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.LoanID,
		&i.UserID,
		&i.Amount,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.LastUpdatedBy,
		&i.UpdatedAt,
		&i.IpFrom,
		&i.UserAgent,
	)
	return i, err
}

const getPayment = `-- name: GetPayment :one
SELECT id, loan_id, user_id, amount, created_by, created_at, last_updated_by, updated_at, ip_from, user_agent FROM payments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id int64) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.LoanID,
		&i.UserID,
		&i.Amount,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.LastUpdatedBy,
		&i.UpdatedAt,
		&i.IpFrom,
		&i.UserAgent,
	)
	return i, err
}

const listDescPayment = `-- name: ListDescPayment :many
SELECT id, loan_id, user_id, amount, created_by, created_at, last_updated_by, updated_at, ip_from, user_agent FROM payments 
ORDER BY id  DESC
LIMIT $1 OFFSET $2
`

type ListDescPaymentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDescPayment(ctx context.Context, arg ListDescPaymentParams) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, listDescPayment, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.LoanID,
			&i.UserID,
			&i.Amount,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.LastUpdatedBy,
			&i.UpdatedAt,
			&i.IpFrom,
			&i.UserAgent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPayment = `-- name: ListPayment :many
SELECT id, loan_id, user_id, amount, created_by, created_at, last_updated_by, updated_at, ip_from, user_agent FROM payments 
ORDER BY id 
LIMIT $1 OFFSET $2
`

type ListPaymentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPayment(ctx context.Context, arg ListPaymentParams) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, listPayment, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.LoanID,
			&i.UserID,
			&i.Amount,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.LastUpdatedBy,
			&i.UpdatedAt,
			&i.IpFrom,
			&i.UserAgent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payments SET 
loan_id=$2,
user_id=$3,
amount=$4,
last_updated_by=$5,
updated_at=$6
WHERE id = $1 RETURNING id, loan_id, user_id, amount, created_by, created_at, last_updated_by, updated_at, ip_from, user_agent
`

type UpdatePaymentParams struct {
	ID            int64     `json:"id"`
	LoanID        int64     `json:"loan_id"`
	UserID        int64     `json:"user_id"`
	Amount        string    `json:"amount"`
	LastUpdatedBy string    `json:"last_updated_by"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePayment,
		arg.ID,
		arg.LoanID,
		arg.UserID,
		arg.Amount,
		arg.LastUpdatedBy,
		arg.UpdatedAt,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.LoanID,
		&i.UserID,
		&i.Amount,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.LastUpdatedBy,
		&i.UpdatedAt,
		&i.IpFrom,
		&i.UserAgent,
	)
	return i, err
}
