// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name,
  mobile,
  email,
  hashed_password,
  password_changed_at,
  address,
  created_by,
  last_updated_by,
  ip_from,
  user_agent
) VALUES (
  $1, $2,$3,$4,$5,$6,$7,$8,$9,$10
)
RETURNING id, name, mobile, address, email, hashed_password, password_changed_at, is_active, created_by, created_at, last_updated_by, updated_at, ip_from, user_agent
`

type CreateUserParams struct {
	Name              string         `json:"name"`
	Mobile            sql.NullString `json:"mobile"`
	Email             string         `json:"email"`
	HashedPassword    string         `json:"hashed_password"`
	PasswordChangedAt time.Time      `json:"password_changed_at"`
	Address           sql.NullString `json:"address"`
	CreatedBy         string         `json:"created_by"`
	LastUpdatedBy     string         `json:"last_updated_by"`
	IpFrom            string         `json:"ip_from"`
	UserAgent         string         `json:"user_agent"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Mobile,
		arg.Email,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.Address,
		arg.CreatedBy,
		arg.LastUpdatedBy,
		arg.IpFrom,
		arg.UserAgent,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Mobile,
		&i.Address,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.LastUpdatedBy,
		&i.UpdatedAt,
		&i.IpFrom,
		&i.UserAgent,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users SET 
is_active=false
WHERE id = $1 RETURNING id, name, mobile, address, email, hashed_password, password_changed_at, is_active, created_by, created_at, last_updated_by, updated_at, ip_from, user_agent
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, mobile, address, email, hashed_password, password_changed_at, is_active, created_by, created_at, last_updated_by, updated_at, ip_from, user_agent FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Mobile,
		&i.Address,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.LastUpdatedBy,
		&i.UpdatedAt,
		&i.IpFrom,
		&i.UserAgent,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, mobile, address, email, hashed_password, password_changed_at, is_active, created_by, created_at, last_updated_by, updated_at, ip_from, user_agent FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Mobile,
		&i.Address,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.LastUpdatedBy,
		&i.UpdatedAt,
		&i.IpFrom,
		&i.UserAgent,
	)
	return i, err
}

const listDescUser = `-- name: ListDescUser :many
SELECT id, name, mobile, address, email, hashed_password, password_changed_at, is_active, created_by, created_at, last_updated_by, updated_at, ip_from, user_agent FROM users 
ORDER BY id  DESC
LIMIT $1 OFFSET $2
`

type ListDescUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDescUser(ctx context.Context, arg ListDescUserParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listDescUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Mobile,
			&i.Address,
			&i.Email,
			&i.HashedPassword,
			&i.PasswordChangedAt,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.LastUpdatedBy,
			&i.UpdatedAt,
			&i.IpFrom,
			&i.UserAgent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUser = `-- name: ListUser :many
SELECT id, name, mobile, address, email, hashed_password, password_changed_at, is_active, created_by, created_at, last_updated_by, updated_at, ip_from, user_agent FROM users 
ORDER BY id 
LIMIT $1 OFFSET $2
`

type ListUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Mobile,
			&i.Address,
			&i.Email,
			&i.HashedPassword,
			&i.PasswordChangedAt,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.LastUpdatedBy,
			&i.UpdatedAt,
			&i.IpFrom,
			&i.UserAgent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET 
name=$2,
mobile=$3,
email=$4,
address=$5,
hashed_password=$6,
last_updated_by=$7,
updated_at=$8
WHERE id = $1 RETURNING id, name, mobile, address, email, hashed_password, password_changed_at, is_active, created_by, created_at, last_updated_by, updated_at, ip_from, user_agent
`

type UpdateUserParams struct {
	ID             int64          `json:"id"`
	Name           string         `json:"name"`
	Mobile         sql.NullString `json:"mobile"`
	Email          string         `json:"email"`
	Address        sql.NullString `json:"address"`
	HashedPassword string         `json:"hashed_password"`
	LastUpdatedBy  string         `json:"last_updated_by"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Mobile,
		arg.Email,
		arg.Address,
		arg.HashedPassword,
		arg.LastUpdatedBy,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Mobile,
		&i.Address,
		&i.Email,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.LastUpdatedBy,
		&i.UpdatedAt,
		&i.IpFrom,
		&i.UserAgent,
	)
	return i, err
}
